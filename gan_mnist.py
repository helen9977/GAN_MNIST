# -*- coding: utf-8 -*-
"""GAN_MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lWBn8fnp0RKWjuLf4zDlvmebCW5PcPV7
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader 
from torchvision import datasets
from torchvision.transforms import transforms
import numpy as np
import matplotlib.pylab as plt

import time

device = 'cuda' if torch.cuda.is_available() else 'cpu'
print ('GPU State:', device)

class discriminator(nn.Module):
    def __init__(self):
        super(discriminator, self).__init__()
        self.main = nn.Sequential(
            nn.Linear(784, 256),
            nn.LeakyReLU(0.2),
            nn.Linear(256, 256),
            nn.LeakyReLU(0.2),
            nn.Linear(256, 1),
            nn.Sigmoid()
        )

    def forward(self, input):
        return self.main(input)


class generator(nn.Module):
    def __init__(self):
        super(generator, self).__init__()
        self.main = nn.Sequential(
            nn.Linear(128, 1024),
            nn.ReLU(),
            nn.Linear(1024, 1024),
            nn.ReLU(),
            nn.Linear(1024, 784),
            nn.Tanh()
        )

    def forward(self, input):
        return self.main(input)

start_time = time.time()
plt.rcParams['image.cmap'] = 'gray' # 设置 颜色 style

def show_images(images):
  sqrtn = int(np.ceil(np.sqrt(images.shape[0]))) #计算大于等于该值的最小整数
  for index, image in enumerate(images):
    plt.subplot(sqrtn, sqrtn, index+1)
    plt.imshow(image.reshape(28, 28))


def d_loss_function(inputs, targets):
  return nn.BCELoss()(inputs,targets) #二分类交叉熵损失函数

def g_loss_function(inputs):
  targets = torch.ones([inputs.shape[0],1])
  targets = targets.to(device)
  return nn.BCELoss()(inputs,targets)

G = generator().to(device)
D = discriminator().to(device)
print(G)
print(D)

epochs = 200
lr = 0.0002
batch_size = 64
g_optimizer = optim.Adam(G.parameters(), lr=lr, betas=(0.5, 0.999))
d_optimizer = optim.Adam(D.parameters(), lr=lr, betas=(0.5,0.999))

transform = transforms.Compose([transforms.ToTensor(),
                               transforms.Normalize((0.5,),(0.5,))])

root = '/content/drive/My Drive/Data/MNIST/'
train_set = datasets.MNIST(root=root, train=True, download=True, transform=transform)
test_set = datasets.MNIST(root=root, train=False, download=True, transform=transform)
train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False)

for epoch in range(epochs):
  epoch += 1

  for times, data in enumerate(train_loader):
    times += 1
    real_inputs = data[0].to(device)
    test = 255 * (0.5 * real_inputs[0] + 0.5)

    real_inputs = real_inputs.view(-1, 784)
    real_outputs = D(real_inputs)
    real_label = torch.ones(real_inputs.shape[0], 1).to(device)

    # 判别器
    noise = (torch.rand(real_inputs.shape[0], 128) - 0.5) / 0.5
    noise = noise.to(device)
    fake_inputs = G(noise)
    fake_outputs = D(fake_inputs)
    fake_label = torch.zeros(fake_inputs.shape[0], 1).to(device)


    outputs = torch.cat((real_outputs, fake_outputs), 0) # 竖着拼接
    targets = torch.cat((real_label, fake_label), 0)

    d_optimizer.zero_grad()
    d_loss = d_loss_function(outputs, targets)
    d_loss.backward()
    d_optimizer.step()


    # 生成器
    noise = (torch.rand(real_inputs.shape[0], 128) - 0.5) / 0.5
    noise = noise.to(device)

    fake_inputs = G(noise)
    fake_outputs =D(fake_inputs)

    g_loss = g_loss_function(fake_outputs)
    g_optimizer.zero_grad()
    g_loss.backward()
    g_optimizer.step()

    if times % 100 ==0 or times == len(train_loader):
      print('[{}/{},{}/{}] D_loss:{:.3f} G_loss:{:.3f}'.format(epoch, epochs, times, len(train_loader), d_loss.item(), g_loss.item()))

    
  imgs_numpy = (fake_inputs.data.cpu().numpy() + 1.0)/2.0
  show_images(imgs_numpy[:16])
  plt.show()


  if epoch % 50 ==0:
    torch.save(G, '/content/drive/My Drive/python/GAN/Generator_epoch_{}.pth'.format(epoch))
    print('Model saved.')


print('Training Finished.')
print('Cost Time :{}s'.format(time.time() - start_time))

# ----------- test-----------

plt.rcParams['figure.figsize'] = (10.0, 8.0)
plt.rcParams['image.interpolation'] = 'nearest'
plt.rcParams['image.cmap'] = 'gray'


G = torch.load ('/content/drive/My Drive/python/GAN/Generator_epoch_200.pth')
G.eval()

noise = (torch.rand(16, 128) - 0.5) / 0.5
noise = noise.to(device)

fake_image = G(noise)
imgs_numpy = (fake_image.data.cpu().numpy()+1.0)/2.0
show_images(imgs_numpy)
plt.show()